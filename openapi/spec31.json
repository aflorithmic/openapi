{
  "openapi": "3.0.1",
  "info": {
    "title": "api.audio",
    "version": "v1",
    "description": "API.audio - the global backbone of audio production. Infrastructure for AI driven synthetic audio creation. Easily integrate audio into your product or allow end users to create high quality audio. \n",
    "termsOfService": "https://www.aflorithmic.ai/terms-of-use",
    "contact": {
      "name": "Product Owner of API Audio",
      "email": "linda@aflorithmic.ai"
    }
  },
  "servers": [
    {
      "url": "https://v1.api.audio",
      "description": "Main production server"
    }
  ],
  "paths": {
    "/script": {
      "description": "## Script (Content Management API)\nThis is an object representing your content in API.audio. Often for producing beautiful text-to-audio you'll need to write some text or import text from another system\nYou can also [retrieve all the Scripts](https://docs.api.audio/reference/listscripts) you've created.\n\nEach script has a unique *scriptId* which you can reference. \n\n### Annotation\n\nScript resource is driven by [Annotation system](https://docs.api.audio/docs/annotation), through which text is sorted into sections, assigned to sound segments and integrated with sound effects and custom media files.\n\n### Script sections\n\nEach script section can be spoken by a separate speaker, have its own Speech configuration or be forced into a given length in Mastering.\n\n### SSML\n\nWe're working on unified SSML system compatible with all the voices in our library. Until then, please make sure that the tags used in your Script are supported by the original provider of the voice.\n\n### Project-Module-Script structure\n\nA problem that you may have is that you may want to store some structure of your projects. For example \"where do I store all of my scripts\"? Well you can store them in modules and store modules in projects. \n\nScripts are nested in modules, modules are nested in projects. The combination of these names generates a scriptId, with which the Script is referenced in other parts of the API. \n\n### Custom scriptId\n\nAnother way is to specify your own scriptId - this way all these layers have the name of scriptId. \n\n###Script versioning\n\nEach script can have its own versions, that can easily be switched in later Speech or Mastering process.\n",
      "options": {
        "tags": [
          "Script"
        ],
        "operationId": "optScript",
        "summary": "Available paths and description",
        "responses": {
          "200": {
            "description": "Options returned successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Options"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Script"
        ],
        "operationId": "postScript",
        "summary": "Create a Script resource.",
        "description": "### Note: If referenced Script already exists, this method updates it.\n## Annotation system in `scriptText`\n### Personalisation parameters/audience\n- Personalisation parameters can be used to dynamically replace content components within a script.\n- E.g. `\"Today is {{weekday|a good day}}!\"`\n### Sections\n- A section is processed individually in later stages of Speech, and treated as a unit in Mastering process.\n- E.g. `\"<<sectionName::intro>>Hello!\"`\n### Sound Segments\n- Nests the content in a segment of a sound template. See available sound templates at https://library.api.audio/sounds.\n- E.g. `\"<<soundSegment::intro>><<sectionName::intro>>Hello!\"`\n### Sound Effects\n- Inserts sound effect belonging to the sound template\n- E.g. `\"<<soundEffect::effect2>>Hurry up, the time is ticking!\"`\n\n**Coming up!** Sound effects will soon be available globally, independent of the sound template applied.\n### Media Files\n- Insert a placeholder for a media file that is specified on Mastering stage. Media files are uploaded through /file/customaudio/uploadurl.\n- E.g. `\"Bruce Lee once said: <<media::bruce_lee_talking>>\"`\n### SSML\n- Synthetic Speech Markup Language standard. Accepted tags vary across providers, so make sure to consult their documentation.\n- E.g. `<break time = '2s'/>`\n\n**Coming up!** We're working on a SSML standard that mitigates all the discrepancies between the providers.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "scriptId": {
                    "type": "string",
                    "description": "Reference string to the Script. If specified, project, module and script names are the same as the script ID. Otherwise, it is generated and provided in the response."
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "moduleName": {
                    "type": "string"
                  },
                  "scriptName": {
                    "type": "string"
                  },
                  "scriptText": {
                    "type": "string",
                    "example": "<<soundSegment::intro>>\n<<sectionName::intro>>\nThis is the first section. Sound segment refers to the sound template that is applied in Mastering. I can use a parameter that I can specify later on the stage of Speech creation: today is {{weekday|a good day}}. If a weekday parameter is not specified, it will fallback to \"a good day\".\n<<soundSegment::main>>\n<<sectionName::main>>\nThis is the main part of the script. Let's use a custom media file <<media::myfile>>. I can insert here any of the files I have uploaded, by referencing \"myfile\" to the mediaId during Mastering process. \n<<soundSegment::outro>>\n<<sectionName::outro>>\nAnd this is the end with an effect <<soundEffect::effect1>>. The effect belongs to the applied sound template.\n"
                  },
                  "version": {
                    "type": "string",
                    "description": "Default version is v0. You can create limitless versions of one scriptId, which is handy in cases of multilingual coverage, targeted content etc."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Script properly created/updated.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "orgId": {
                      "type": "string"
                    },
                    "projectName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "scriptName": {
                      "type": "string"
                    },
                    "scriptId": {
                      "type": "string"
                    },
                    "scriptText": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "availableVersions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "estimatedLength": {
                      "type": "string"
                    },
                    "sections": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "text_original": {
                            "type": "string"
                          },
                          "order": {
                            "type": "string"
                          },
                          "orderString": {
                            "type": "string"
                          },
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "items": {
                                "properties": {},
                                "additionalProperties": true
                              }
                            }
                          },
                          "soundEffect": {
                            "type": "string"
                          },
                          "soundSegment": {
                            "type": "string"
                          },
                          "media": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "creationDate": {
                      "type": "string"
                    },
                    "containsDictionary": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Script"
        ],
        "operationId": "listScripts",
        "summary": "List all scripts.",
        "parameters": [
          {
            "in": "query",
            "name": "projectName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "moduleName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scriptName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scriptId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scripts properly listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "scripts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "orgId": {
                            "type": "string"
                          },
                          "projectName": {
                            "type": "string"
                          },
                          "moduleName": {
                            "type": "string"
                          },
                          "scriptName": {
                            "type": "string"
                          },
                          "scriptId": {
                            "type": "string"
                          },
                          "scriptText": {
                            "type": "string"
                          },
                          "version": {
                            "type": "string"
                          },
                          "availableVersions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "estimatedLength": {
                            "type": "string"
                          },
                          "sections": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "text": {
                                  "type": "string"
                                },
                                "text_original": {
                                  "type": "string"
                                },
                                "order": {
                                  "type": "string"
                                },
                                "orderString": {
                                  "type": "string"
                                },
                                "parameters": {
                                  "type": "object",
                                  "properties": {
                                    "items": {
                                      "properties": {},
                                      "additionalProperties": true
                                    }
                                  }
                                },
                                "soundEffect": {
                                  "type": "string"
                                },
                                "soundSegment": {
                                  "type": "string"
                                },
                                "media": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "creationDate": {
                            "type": "string"
                          },
                          "containsDictionary": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/script/{scriptId}": {
      "get": {
        "tags": [
          "Script"
        ],
        "operationId": "getScriptId",
        "summary": "Get Script data.",
        "parameters": [
          {
            "in": "path",
            "name": "scriptId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "required": false,
            "description": "Version of the script.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "preview",
            "required": false,
            "description": "Pronunciation dictionary preview - shows phoneme injections.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "lang",
            "required": false,
            "description": "The first part of ISO language code, e.g. en for english.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Script found.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "orgId": {
                      "type": "string"
                    },
                    "projectName": {
                      "type": "string"
                    },
                    "moduleName": {
                      "type": "string"
                    },
                    "scriptName": {
                      "type": "string"
                    },
                    "scriptId": {
                      "type": "string"
                    },
                    "scriptText": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "availableVersions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "estimatedLength": {
                      "type": "string"
                    },
                    "sections": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          },
                          "text_original": {
                            "type": "string"
                          },
                          "order": {
                            "type": "string"
                          },
                          "orderString": {
                            "type": "string"
                          },
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "items": {
                                "properties": {},
                                "additionalProperties": true
                              }
                            }
                          },
                          "soundEffect": {
                            "type": "string"
                          },
                          "soundSegment": {
                            "type": "string"
                          },
                          "media": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "creationDate": {
                      "type": "string"
                    },
                    "containsDictionary": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Script not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Script"
        ],
        "operationId": "deleteScript",
        "summary": "Delete script.",
        "parameters": [
          {
            "in": "path",
            "name": "scriptId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "description": "Version of the Script to be deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Script successfully removed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Script not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/script/random": {
      "get": {
        "tags": [
          "Script"
        ],
        "operationId": "getRandomScript",
        "summary": "Generate a random script.",
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "default": "FunFact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Script found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Random text."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/voice": {
      "description": "##Voice library service. Library page: https://library.api.audio/.\n",
      "options": {
        "tags": [
          "Voice"
        ],
        "operationId": "optVoice",
        "summary": "Available paths and description",
        "responses": {
          "200": {
            "description": "Options returned successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Options"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Voice"
        ],
        "operationId": "listVoices",
        "summary": "List all available voices.",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Max. amount of items to be returned",
            "schema": {
              "type": "number",
              "format": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset. Should be incremented by the value of `itemsLimit` with each request.\n",
            "schema": {
              "type": "number",
              "format": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort order of items by an attribute.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "language",
            "description": "Language of the voice.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "ISO language code of the voice, e.g. en-US\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accent",
            "description": "Accent of the voice.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gender",
            "description": "Gender of the voice.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ageBracket",
            "description": "Age bracket of the voice.",
            "schema": {
              "type": "string",
              "enum": [
                "child",
                "adult",
                "senior"
              ]
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Tags of the voice. Multiple tags separated by comma are accepted.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "industryExamples",
            "description": "Multiple tags separated by comma are accepted.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "timePerformance",
            "description": "Relative response time.\n",
            "schema": {
              "type": "string",
              "enum": [
                "fast",
                "medium",
                "slow"
              ]
            }
          },
          {
            "in": "query",
            "name": "provider",
            "description": "Provider of the voice.\n",
            "schema": {
              "type": "string",
              "enum": [
                "msnr",
                "polly",
                "azure",
                "google",
                "ibm",
                "retro",
                "vocalid",
                "resemble"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voices properly listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "voices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "alias": {
                            "type": "string"
                          },
                          "tier": {
                            "type": "string"
                          },
                          "accent": {
                            "type": "string"
                          },
                          "language": {
                            "type": "string"
                          },
                          "provider": {
                            "type": "string"
                          },
                          "providerFullName": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "industryExamples": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "supportedStyles": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "longSoftDescription": {
                            "type": "string"
                          },
                          "languageCode": {
                            "type": "string"
                          },
                          "ageBracket": {
                            "type": "string"
                          },
                          "voiceId": {
                            "type": "string"
                          },
                          "gender": {
                            "type": "string"
                          },
                          "sectionCharacterLimit": {
                            "type": "string"
                          },
                          "timePerformance": {
                            "type": "string"
                          },
                          "neuralStandard": {
                            "type": "string"
                          },
                          "audioSample": {
                            "type": "string"
                          },
                          "picture": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/voice/name/{name}": {
      "get": {
        "tags": [
          "Voice"
        ],
        "operationId": "getVoiceName",
        "summary": "Get data on voice.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "description": "Alias or original voice ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voice found.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "alias": {
                      "type": "string"
                    },
                    "tier": {
                      "type": "string"
                    },
                    "accent": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "providerFullName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "industryExamples": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "supportedStyles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "longSoftDescription": {
                      "type": "string"
                    },
                    "languageCode": {
                      "type": "string"
                    },
                    "ageBracket": {
                      "type": "string"
                    },
                    "voiceId": {
                      "type": "string"
                    },
                    "gender": {
                      "type": "string"
                    },
                    "sectionCharacterLimit": {
                      "type": "string"
                    },
                    "timePerformance": {
                      "type": "string"
                    },
                    "neuralStandard": {
                      "type": "string"
                    },
                    "audioSample": {
                      "type": "string"
                    },
                    "picture": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Voice not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/speech": {
      "description": "##TTS service. \nSpeech resource is responsible for creating TTS out of **Script** resource, or, in case of /speech/sync endpoint, direct TTS synthesis out of text.\n\nAny voice available in the **Voice Library** can be used to synthesize speech per **Script** section.\n\nIf your **Script** contains text to be synthesised, it is necessary to synthesise it here before moving on to **Mastering**.\n",
      "options": {
        "tags": [
          "Speech"
        ],
        "operationId": "optSpeech",
        "summary": "Available paths and description",
        "responses": {
          "200": {
            "description": "Options returned successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Options"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Speech"
        ],
        "operationId": "postSpeech",
        "summary": "Synthesize Speech from Script.",
        "description": "Good for extensive content. \n- Set `sync` field to false for asynchronous behaviour (no waiting for response, retrieve it later using GET method).\n\n- Each Script section can have a separate configuration. \n\n- Script sections are synthesized in parallel, you may use it to your advantage to increase time performance.\n\n- Script sections that contain a media or sound effect tags are split into multiple files, as the media are rendered in `/mastering`. Similarly, a Script section containing only media tags will not be rendered here.\n\n- Currently only wav format is supported in the output.\n",
        "requestBody": {
          "description": "Defined configuration applies globally to all the Script sections. Use `sections` field to overwrite fields in sections.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "scriptId": {
                    "type": "string",
                    "description": "Reference to the Script that is to be synthesized, use `/script` to create and get it."
                  },
                  "version": {
                    "type": "string",
                    "description": "Specific version of the referenced Script."
                  },
                  "voice": {
                    "type": "string",
                    "default": "Joanna",
                    "description": "Either alias or original (provider's) ID. Available voices are listed at https://library.api.audio/\n"
                  },
                  "speed": {
                    "type": "number",
                    "format": "float",
                    "default": 1,
                    "description": "Scalar for speed manipulation, range 0.5-3."
                  },
                  "silencePadding": {
                    "type": "string",
                    "description": "Amount of microseconds for silence padding. Half of the amount is inserted as silence at the beginning and at the end of each Speech file."
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "chewie",
                      "dark_father",
                      "88b",
                      "2r2d"
                    ],
                    "description": "Effect to apply to TTS."
                  },
                  "audience": {
                    "type": "object",
                    "description": "Object defining the values for Script parameters. E.g. for Script parameters in `Hello {{username}}, how's your {{weekday}} going?` the object would be `{\"username\": \"Michael\", \"weekday\": \"Sunday\"}`.\n",
                    "properties": {},
                    "additionalProperties": true
                  },
                  "sections": {
                    "type": "object",
                    "description": "Separate configurations for Script section. E.g. to specify a separate voice and speed for Script section `intro` the object would be `{\"main\": {\"voice\": \"Leah\", \"speed\": 1.2}}`.\n",
                    "properties": {},
                    "additionalProperties": true
                  },
                  "useDictionary": {
                    "type": "boolean",
                    "description": "Whether to apply phoneme injections specified in Script."
                  },
                  "useTextNormalizer": {
                    "type": "boolean",
                    "description": "Applies text normalization, which can help resolve grammatical errors with TTS pronunciations, for example 11:12 Uhr -> 11 Uhr 12. Note - this only works for german voices at present."
                  }
                },
                "required": [
                  "scriptId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requests to TTS models were succesfully sent and responses were gathered. Look into the results of each section to determine whether the synthesis itself was succesful.\n\nKeys are Script section names. If a Script section was split, the name will have `_N` appended to it e.g. intro, intro_2, intro_3 ...\n",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "intro": {
                      "message": "AZURE/en-ZA-LeahNeural : synthesis successful.",
                      "status_code": "201",
                      "created_at": "2022-05-12 10:26:18.655711",
                      "requestId": "210f086a-264e-4ae3-9543-84329abbed44",
                      "url": "https://v1.api.audio/url/47782e/intro__%243ct10n~1of3.wav"
                    },
                    "main": {
                      "message": "AZURE/en-ZA-LeahNeural : synthesis successful.",
                      "status_code": "201",
                      "created_at": "2022-05-12 10:26:18.677016",
                      "requestId": "210f086a-264e-4ae3-9543-84329abbed44",
                      "url": "https://v1.api.audio/url/485f52/intro__%243ct10n~2of3.wav"
                    },
                    "outro": {
                      "message": "AZURE voice model could not process the script : Invalid response received: code: 400, message: The 'mstts:express-as' start tag on line 1 position 165 does not match the end tag of 'voice'. Line 1, position 290.",
                      "status_code": "422",
                      "created_at": "2022-05-12 10:26:18.694793",
                      "requestId": "210f086a-264e-4ae3-9543-84329abbed44",
                      "url": ""
                    }
                  },
                  "properties": {
                    "<sectionName>": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Either `{provider}/{alias} : synthesis successful.` or an error message.\n"
                        },
                        "status_code": {
                          "type": "string",
                          "description": "\"201\" means created, \"422\" means there was some issue that is described in the `message` field.\n",
                          "enum": [
                            "201",
                            "422"
                          ]
                        },
                        "created_at": {
                          "type": "string",
                          "description": "Time of TTS response."
                        },
                        "requestId": {
                          "type": "string",
                          "description": "Unique identifier of the request."
                        },
                        "url": {
                          "type": "string",
                          "description": "URL to download the synthesized file."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Synthesis is in progress on the server side. Returned when `sync` field is set to false, or when response wait is approaching 30 seconds.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "requestId": {
                      "type": "string",
                      "description": "Unique identifier of the request."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Voice or scriptId not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Speech"
        ],
        "operationId": "getSpeech",
        "summary": "Retrieve latest Speech files.",
        "description": "The endpoint holds on with the response when there is a server-side synthesis in progress for given `scriptId`. Just as POST method, it returns `202` when approaching 30 seconds of response wait.\n\n`scriptId` and `requestId` are interchangeable.\n",
        "parameters": [
          {
            "in": "query",
            "name": "scriptId",
            "description": "Reference to the Script that is to be retrieved. Use /script to create and get it.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "description": "Specific version of the Script to be retrieved.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "requestId",
            "description": "Reference to the particular Speech request to be retrieved.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "section",
            "description": "Section name of the specific section to be retrieved.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scriptParameters",
            "description": "Reference to specified audience in POST request. E.g. for audience `{\"username\": \"Michael\", \"weekday\": \"Sunday\"}` the parameters would be `username=Michael&weekday=Sunday` (not case-sensitive).\n",
            "schema": {
              "type": "object",
              "additionalProperties": true
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned URLs for all sections. As in POST, keys are Script section names, but the value is just the URL string.\n",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "intro": "https://v1.api.audio/url/992047/intro__%243ct10n~1of3.wav",
                    "main": "https://v1.api.audio/url/1e04a6/main__%243ct10n~2of3.wav",
                    "outro": "https://v1.api.audio/url/b1a325/outro__%243ct10n~3of3.wav"
                  },
                  "properties": {
                    "<sectionName>": {
                      "type": "string",
                      "description": "URL to download the synthesized file."
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Synthesis is in progress on the server side. Returned when response wait is approaching 30 seconds.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Voice or scriptId not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "422": {
            "description": "At least one of the Script sections encountered a problem during synthesis. Keys are Script section names.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "<sectionName>": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Either `{provider}/{alias} : synthesis successful.` or an error message.\n"
                        },
                        "status_code": {
                          "type": "string",
                          "description": "Always \"422\".\n"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "Time of TTS response."
                        },
                        "requestId": {
                          "type": "string",
                          "description": "Unique identifier of the request."
                        },
                        "url": {
                          "type": "string",
                          "description": "Empty field."
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Additional errors."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/speech/sync": {
      "post": {
        "tags": [
          "Speech"
        ],
        "operationId": "postSpeechSync",
        "summary": "Synthesize speech directly from text.",
        "description": "Good for time-critical applications. **Maximum runtime is 30 seconds**.\n### Caching\nTTS responses are globally cached to improve performance. You can set `Cache-Control` to `no-cache` to skip the cache.\nFollowing parameters are hashed as the cache key:\n  - text\n  - voice\n  - speed\n  - metadata\n  - effect\n  - bitrate\n  - sampling_rate\n  - output specified by the `Accept` header\n\nCache is missed when any of these parameters change.\n",
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "description": "Specifies the format of the output audio.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "audio/wav",
                "audio/mp3",
                "audio/pcm"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Fields `text` and `ssml` are interchangeable.\n### SSML\n  When using `ssml` field, expected SSML format varies depending on provider of the voice. \n\n  If in doubt, consult provider's SSML documentation. Any kind of error will be forwarded back to you.\n### Limits\n  Maximum character lengths:\n  - `text` field: 800 characters\n  - `ssml` field: 1000 characters\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text to synthesize. Maximum 800 characters."
                  },
                  "ssml": {
                    "type": "string",
                    "description": "Text in SSML format to synthesize. Maximum 1000 characters. Expected SSML format varies depending on provider of the voice."
                  },
                  "voice": {
                    "type": "string",
                    "description": "Either alias or original (provider's) ID. Available voices are listed at https://library.api.audio/\n"
                  },
                  "metadata": {
                    "type": "boolean",
                    "description": "Return JSON with base64 encoded audio and visemes, if available."
                  },
                  "sampling_rate": {
                    "type": "string",
                    "enum": [
                      "16000",
                      "22050",
                      "24000",
                      "44100",
                      "48000"
                    ],
                    "default": "24000",
                    "description": "Sampling rate of the output. Applicable to wave format."
                  },
                  "bitrate": {
                    "type": "string",
                    "default": "192",
                    "description": "Bitrate of the output. Applicable to mp3 format."
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "chewie",
                      "dark_father",
                      "88b",
                      "2r2d"
                    ],
                    "description": "Effect to apply to TTS."
                  },
                  "speed": {
                    "type": "number",
                    "format": "float",
                    "default": 1,
                    "description": "Scalar for speed manipulation, range 0.5-3."
                  }
                },
                "required": [
                  "text",
                  "voice"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful synthesis. Type of returned content is specified by `Accept` header in the request and `metadata` field.\n",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "audio/mp3": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "properties": {
                    "audio_data": {
                      "type": "string",
                      "format": "byte",
                      "description": "Base64 encoded."
                    },
                    "sampling_rate": {
                      "type": "string",
                      "description": "Sampling rate of the returned file."
                    },
                    "event_data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "This is an object schema for Messner visemes. Voices from resemble.ai return a different response. We're working on unifying metadata alltogether.",
                        "properties": {
                          "phoneme": {
                            "type": "string"
                          },
                          "viseme": {
                            "type": "string"
                          },
                          "offset": {
                            "type": "number",
                            "format": "float"
                          },
                          "duration": {
                            "type": "number",
                            "format": "float"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Voice not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/mastering": {
      "description": "##Mastering service combines Speech, Media and Sound templates into a high-quality audio track.\n",
      "options": {
        "tags": [
          "Mastering"
        ],
        "operationId": "optMastering",
        "summary": "Available paths and description",
        "responses": {
          "200": {
            "description": "Options returned successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Options"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Mastering"
        ],
        "operationId": "postMastering",
        "summary": "Create a mastered file.",
        "description": "Keep in mind that in order to successfuly create a mastered file for a Script, Speech files must be generated for that Script beforehand, given it contains any content for synthesis.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "scriptId": {
                    "type": "string",
                    "description": "Reference to the Script to master."
                  },
                  "version": {
                    "type": "string",
                    "description": "Version of the Script."
                  },
                  "audience": {
                    "type": "object",
                    "description": "Object referencing the audience used in Speech production.\n",
                    "properties": {},
                    "additionalProperties": true
                  },
                  "soundTemplate": {
                    "type": "string",
                    "description": "Reference to the sound template to be applied. Available sound templates: https://library.api.audio/sounds\n"
                  },
                  "masteringPreset": {
                    "type": "string",
                    "description": "The mastering preset to use, this enables features such as sidechain compression 'i.e. ducking'. GET /mastering-presets to see available presets."
                  },
                  "public": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the mastered file should be accessible by anyone in the internet. Use it at your own risk.\n"
                  },
                  "vast": {
                    "type": "boolean",
                    "default": false,
                    "description": "Create a VAST file of your mastered file. The vast flag only works if public is True."
                  },
                  "endFormat": {
                    "type": "string",
                    "default": "mp3",
                    "enum": [
                      "wav",
                      "mp3",
                      "flac",
                      "ogg",
                      "mp3_very_low",
                      "mp3_low",
                      "mp3_medium",
                      "mp3_high",
                      "mp3_very_high",
                      "mp3_alexa"
                    ],
                    "description": "Format of the output file. Very low - very high refers to the quality of mp3 (bitrate)."
                  },
                  "forceLength": {
                    "type": "number",
                    "format": "float",
                    "description": "Force the total length of the mastered file to the amount of seconds."
                  },
                  "sectionProperties": {
                    "description": "Force length of particular Script sections.",
                    "type": "object",
                    "properties": {
                      "<sectionName>": {
                        "type": "object",
                        "properties": {
                          "endAt": {
                            "type": "number",
                            "format": "float",
                            "description": "Timemark in seconds at which the section is supposed to end."
                          },
                          "justify": {
                            "type": "string",
                            "enum": [
                              "flex-start",
                              "centre",
                              "flex-end"
                            ],
                            "description": "Flex-start (default): any gap between speech/effect/media ending and the next section starting is placed at the end of the current section. Speech will start at the very beginning together with the sound.\n                                  \nCentre: Gaps are placed evenly at the start and end of the current section. Speech will float in the middle of the section.\n\nFlex-end: The gap is placed at the start of the current section. Speech is pushed to the end of the section, with sound starting at the beginning.\n\nExceeding content is faded out.\n"
                          }
                        }
                      }
                    }
                  },
                  "matchVoice": {
                    "description": "Levels the volume of synthetic speech with the volume of media files.",
                    "type": "boolean",
                    "default": false
                  },
                  "channels": {
                    "type": "number",
                    "format": "integer",
                    "description": "1 for mono, 2 for stereo",
                    "default": 2
                  },
                  "mediaVolumeTrim": {
                    "type": "number",
                    "format": "float",
                    "description": "Trim the volume of the media files used (in dB). This attribute has a valid range of -12 to 12 dB."
                  },
                  "connectors": {
                    "type": "array",
                    "description": "List of dicts specifying configuration for particular 3rd party connection. For guidelines in context of supported 3rd party application, see [connectors documentation](https://docs.api.audio/docs/what-are-connectors).\n",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  },
                  "share": {
                    "type": "boolean",
                    "description": "If you would like to have a sharable link created with your audio file, use this flag. If you put `share: True` the response will have `shareUrl` parameter returned. (Note: If you put this flag, your private files will be converted to public files.)\n",
                    "default": false
                  }
                },
                "required": [
                  "scriptId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mastering created succesfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "warnings": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Mastering"
        ],
        "operationId": "getMastering",
        "summary": "Retrieve a mastered file.",
        "parameters": [
          {
            "in": "query",
            "name": "scriptId",
            "description": "Reference to the Script from which the file was produced.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "description": "Version of the Script.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scriptParameters",
            "description": "Reference to specified audience in POST /speech. E.g. for audience `{\"username\": \"Michael\", \"weekday\": \"Sunday\"}` the parameters would be `username=Michael&weekday=Sunday` (not case-sensitive).\n",
            "schema": {
              "type": "object",
              "additionalProperties": true
            },
            "style": "form",
            "explode": true
          },
          {
            "in": "query",
            "name": "public",
            "description": "Whether the produced file is public.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "vast",
            "description": "Whether to retrieve the VAST file.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "endFormat",
            "description": "The format in which the file was produced.",
            "schema": {
              "type": "string",
              "default": "mp3",
              "enum": [
                "wav",
                "mp3",
                "flac",
                "ogg",
                "mp3_very_low",
                "mp3_low",
                "mp3_medium",
                "mp3_high",
                "mp3_very_high",
                "“mp3_alexa”"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mastering file found.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "script": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/mastering-presets": {
      "get": {
        "tags": [
          "Mastering"
        ],
        "operationId": "getMasteringPresets",
        "summary": "List all available mastering presets.",
        "responses": {
          "200": {
            "description": "Presets properly listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "presets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the preset."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the preset."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/sound": {
      "description": "##Sound library service. More at https://library.api.audio/sounds.\n",
      "options": {
        "tags": [
          "Sound"
        ],
        "operationId": "optSound",
        "summary": "Available paths and description",
        "responses": {
          "200": {
            "description": "Options returned successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Options"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/sound/template": {
      "get": {
        "tags": [
          "Sound"
        ],
        "operationId": "getSoundTemplate",
        "summary": "List available Sound Templates",
        "description": "Multiple values can be specified in tags and collections through comma separation e.g. `?tags=intense,minimal`\n",
        "parameters": [
          {
            "in": "query",
            "name": "genre",
            "schema": {
              "type": "string",
              "enum": [
                "electronic",
                "acoustic",
                "atmospheric",
                "abstract",
                "rock"
              ]
            }
          },
          {
            "in": "query",
            "name": "tempo",
            "schema": {
              "type": "string",
              "enum": [
                "down",
                "mid",
                "up"
              ]
            }
          },
          {
            "in": "query",
            "name": "collections",
            "schema": {
              "type": "string",
              "enum": [
                "newscast",
                "commercial",
                "education",
                "fitness",
                "kids entertainment",
                "ready set audio ad"
              ]
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string",
              "enum": [
                "intense",
                "minimal",
                "reflective",
                "melodic",
                "happy",
                "nostalgic",
                "focus",
                "energetic",
                "uplifting",
                "active",
                "relaxed",
                "ambience",
                "mysterious",
                "positive",
                "informative",
                "workout",
                "work",
                "meditation",
                "travel",
                "acoustic",
                "playful",
                "uplifting"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sound templates listed succesfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "isElastic": {
                            "type": "boolean",
                            "description": "An elastic template seemlessly shrinks and grows to any length."
                          },
                          "collections": {
                            "type": "array",
                            "description": "Suggested use cases.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "sample": {
                            "type": "string",
                            "description": "Audio sample of the Sound Template."
                          },
                          "contents": {
                            "type": "array",
                            "description": "Segments and sound effects available in the Sound Template.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "genre": {
                            "type": "string"
                          },
                          "templateName": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "tempo": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "soundTemplateId": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/sound/parameter": {
      "get": {
        "tags": [
          "Sound"
        ],
        "operationId": "getSoundParameter",
        "summary": "List all parameters in available templates.",
        "responses": {
          "200": {
            "description": "Parameters properly listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "genre": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tempo": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "collections": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/file/customaudio/uploadurl": {
      "get": {
        "tags": [
          "File"
        ],
        "operationId": "uploadFile",
        "summary": "Upload a file to use in <<media::alias>> Script annotation.",
        "description": "This endpoint returns `mediaId` that is **the reference to the file** and the upload URL. In order to upload your file, make a PUT request to the returned URL, with your file as payload. \n\nThink of the alias part of <<media::alias>> annotation as the reference to the **placeholder** in the Script. You link this placeholder to the actual file by using `mediaFiles` field in POST /mastering request, e.g. `mediaFiles={\"alias\": \"f22e7250\"}`\n",
        "parameters": [
          {
            "in": "query",
            "name": "filename",
            "description": "Name of the file. Not a reference!",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Tags to link to the file, separated by comma, e.g. \"recording,happy\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upload URL returned.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mediaId": {
                      "type": "string",
                      "description": "Reference to the file."
                    },
                    "fileUploadUrl": {
                      "type": "string",
                      "description": "Make a PUT request to this URL with your file in the payload in order to upload it."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/file/customaudio": {
      "get": {
        "tags": [
          "File"
        ],
        "operationId": "listMediaFiles",
        "summary": "List available media files.",
        "parameters": [
          {
            "in": "query",
            "name": "mediaId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "List only files that have given tag.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media files listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "savedAudioFiles": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "filename": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "mediaId": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "number",
                      "format": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/diction": {
      "description": "Pronunciation dictionaries contain IPA records of words to ensure correct pronunciation independently of TTS' language.",
      "options": {
        "tags": [
          "Diction"
        ],
        "operationId": "optDiction",
        "summary": "Available paths and description",
        "responses": {
          "200": {
            "description": "Options returned successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Options"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Diction"
        ],
        "operationId": "listDicts",
        "summary": "List available dictionaries.",
        "responses": {
          "200": {
            "description": "Dictionaries listed.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "dictId": {
                        "type": "string"
                      },
                      "lang": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/diction/list/{dict_id}": {
      "get": {
        "tags": [
          "Diction"
        ],
        "operationId": "listDictElements",
        "summary": "List dictionary elements",
        "parameters": [
          {
            "name": "dict_id",
            "in": "path",
            "description": "The id of the dictionary, e.g. de_boy_names",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dictionaries listed.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string",
                    "description": "Dictionary IDs containing searched word."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/diction/list_types": {
      "get": {
        "tags": [
          "Diction"
        ],
        "operationId": "listDictTypes",
        "summary": "List dictionary types",
        "responses": {
          "200": {
            "description": "Dictionaries listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "types": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/diction/search/{word}/{language}": {
      "get": {
        "tags": [
          "Diction"
        ],
        "operationId": "searchDict",
        "summary": "Search dictionaries through word and language",
        "parameters": [
          {
            "name": "word",
            "in": "path",
            "description": "The word to look for in dictionaries",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "The first part of ISO language code, e.g. `de` for German, `en` for English etc.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dictionaries listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "<dict_id>": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Words contained in the dictionary."
                      }
                    },
                    "lang": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/orchestrator": {
      "description": "##Orchestrator service brings all the fundamental API services (Script, Speech, Mastering) down to one request.\n",
      "options": {
        "tags": [
          "Orchestrator"
        ],
        "operationId": "optOrchestrator",
        "summary": "Available paths and description",
        "responses": {
          "200": {
            "description": "Options returned successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Options"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/orchestrator/create_audio": {
      "post": {
        "tags": [
          "Orchestrator"
        ],
        "operationId": "postOrchestratorCreateAudio",
        "summary": "Create audio with one request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "scriptText": {
                    "type": "string",
                    "description": "Script text to synthesise. This is passed to Script service, so Script annotations are supported."
                  },
                  "voice": {
                    "type": "string",
                    "description": "Name of the voice to be used. Can be found in GET /voice"
                  },
                  "soundTemplate": {
                    "type": "string",
                    "description": "Name of the sound template to be used. Can be found in GET /sound/template"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audio created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "warnings": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/orchestrator/media_with_sound": {
      "post": {
        "tags": [
          "Orchestrator"
        ],
        "operationId": "postOrchestratorMediaWithSound",
        "summary": "Combine media with a sound template.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mediaId": {
                    "type": "string",
                    "description": "ID of the media file. It is received after uploading and can be found in GET /file/customaudio"
                  },
                  "soundTemplate": {
                    "type": "string",
                    "description": "Name of the sound template. Can be found in GET /sound/template"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audio created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "warnings": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/users": {
      "description": "## CRUD users resource. List, create, update and delete users. Files and trained models must belong to a user.\n",
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "postUsers",
        "summary": "Create a User-.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier."
                  },
                  "name": {
                    "type": "string",
                    "description": "User's name, auxilary."
                  },
                  "gender": {
                    "type": "string",
                    "description": "male / female / non-binary"
                  },
                  "availableVerticals": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Verticals that the user has access to."
                  },
                  "selectedVerticals": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Verticals that are selected for users to record. Selected vertical must be included in availableVerticals."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Metadata object with custom fields."
                  },
                  "voiceCloningEnabled": {
                    "type": "boolean",
                    "description": "Access switch."
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User properly created."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "listUsers",
        "summary": "Lists users belonging to the organisation.",
        "responses": {
          "200": {
            "description": "Users properly listed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier."
                          },
                          "name": {
                            "type": "string",
                            "description": "User's name, auxilary."
                          },
                          "gender": {
                            "type": "string",
                            "description": "male / female / non-binary"
                          },
                          "availableVerticals": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Verticals that the user has access to."
                          },
                          "selectedVerticals": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Verticals that are selected for users to record. Selected vertical must be included in availableVerticals."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Metadata object with custom fields."
                          },
                          "voiceCloningEnabled": {
                            "type": "boolean",
                            "description": "Access switch."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUser",
        "summary": "Get user data.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User exists and data retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier."
                        },
                        "name": {
                          "type": "string",
                          "description": "User's name, auxilary."
                        },
                        "gender": {
                          "type": "string",
                          "description": "male / female / non-binary"
                        },
                        "availableVerticals": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Verticals that the user has access to."
                        },
                        "selectedVerticals": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Verticals that are selected for users to record. Selected vertical must be included in availableVerticals."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Metadata object with custom fields."
                        },
                        "voiceCloningEnabled": {
                          "type": "boolean",
                          "description": "Access switch."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUser",
        "summary": "Update User data. Cannot update ID.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User's name, auxilary."
                  },
                  "gender": {
                    "type": "string",
                    "description": "male / female / non-binary"
                  },
                  "availableVerticals": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Verticals that the user has access to."
                  },
                  "selectedVerticals": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Verticals that are selected for users to record. Selected vertical must be included in availableVerticals."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Metadata object with custom fields."
                  },
                  "voiceCloningEnabled": {
                    "type": "boolean",
                    "description": "Access switch."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Script found.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier."
                        },
                        "name": {
                          "type": "string",
                          "description": "User's name, auxilary."
                        },
                        "gender": {
                          "type": "string"
                        },
                        "availableVerticals": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Verticals that the user has access to."
                        },
                        "selectedVerticals": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Verticals that are selected for users to record. Selected vertical must be included in availableVerticals."
                        },
                        "createdAt": {
                          "type": "string",
                          "description": "Unix time of user creation."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Metadata object with custom fields."
                        },
                        "voiceCloningEnabled": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUser",
        "summary": "Deletes User and all their files.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully removed."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/files": {
      "description": "CRUD files resource. Upload, download and list files. Only valid wav files are accepted up to 5 MB.\n",
      "get": {
        "tags": [
          "Files"
        ],
        "operationId": "listVCFiles",
        "summary": "List all files of all users.",
        "responses": {
          "200": {
            "description": "Files properly listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": {
                            "type": "string"
                          },
                          "filesCount": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "recordedUtterances": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/files/{userId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "operationId": "listUserFiles",
        "summary": "List all files of the user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Files properly listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string"
                        },
                        "filesCount": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "recordedUtterances": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "operationId": "deleteUserFiles",
        "summary": "Deletes all files of the user.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Files deleted."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/files/{userId}/{verticalId}/{utteranceId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "operationId": "getFile",
        "summary": "Downloads file.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "verticalId",
            "required": true,
            "description": "ID of the vertical to which the read utterance belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "utteranceId",
            "required": true,
            "description": "ID of the utterance read in the recording.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Accept",
            "description": "Specifies the format of the output audio.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "audio/wav"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File found and returned.",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "operationId": "postFile",
        "summary": "Uploads file. Must be a valid wav format, less than 5 MB. Cannot create a file that already exists for given utterance. For that use PUT method.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "verticalId",
            "required": true,
            "description": "ID of the vertical to which the read utterance belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "utteranceId",
            "required": true,
            "description": "ID of the utterance read in the recording.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "Specifies the format of the input audio.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "audio/wav"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "audio/wav": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded and created."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "User/vertical/utterance not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "operationId": "putFile",
        "summary": "Updates file.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "verticalId",
            "required": true,
            "description": "ID of the vertical to which the read utterance belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "utteranceId",
            "required": true,
            "description": "ID of the utterance read in the recording.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "Specifies the format of the input audio.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "audio/wav"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "audio/wav": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File found and updated.",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "operationId": "deleteFile",
        "summary": "Deletes file.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "verticalId",
            "required": true,
            "description": "ID of the vertical to which the read utterance belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "utteranceId",
            "required": true,
            "description": "ID of the utterance read in the recording.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File found and deleted."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "File not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/verticals": {
      "description": "CRUD verticals resource. Create, read, update and delete verticals and their content (utterances). \nVerticals belong to organisation. Public verticals available to everybody start with `public_aflr`.\nThese are not available straight away, first they need to be added to a users' `availableVerticals` field.\n",
      "get": {
        "tags": [
          "Verticals"
        ],
        "operationId": "listVerticals",
        "summary": "List all verticals.",
        "responses": {
          "200": {
            "description": "Verticals properly listed.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "languageCode": {
                            "type": "string"
                          },
                          "utteranceCount": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "createdAt": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Verticals"
        ],
        "operationId": "postVertical",
        "summary": "Creates a vertical.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier, no longer than 100 characters."
                  },
                  "languageCode": {
                    "type": "string",
                    "description": "Two character language code compliant with ISO standard, e.g. \"en\" for English."
                  },
                  "description": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "alias": {
                    "type": "string"
                  },
                  "utterances": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier of the utterance. No more than 100 characters."
                        },
                        "text": {
                          "type": "string",
                          "description": "No more than 500 characters."
                        }
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "languageCode",
                  "utterances"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vertical properly created."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/verticals/{verticalId}": {
      "parameters": [
        {
          "in": "path",
          "name": "verticalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Verticals"
        ],
        "operationId": "getVertical",
        "summary": "Read vertical data.",
        "parameters": [
          {
            "in": "query",
            "name": "showUtterances",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "quantity",
            "required": false,
            "description": "Number of utterances to return",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Use together with `quantity` to paginate through utterances. If quantity is 10 in one request, the offset should be 10 in the next one.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File found and returned.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier."
                    },
                    "languageCode": {
                      "type": "string",
                      "description": "Two character language code compliant with ISO standard, e.g. \"en\" for English."
                    },
                    "description": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "alias": {
                      "type": "string"
                    },
                    "utterancesCount": {
                      "type": "integer"
                    },
                    "utterances": {
                      "type": "array",
                      "description": "Shown only when `showUtterances` is set to true.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the utterance."
                          },
                          "text": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Vertical not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Verticals"
        ],
        "operationId": "postVerticalUtterances",
        "summary": "Add utterances to the vertical. Cannot add existing utterances. To be able to add and overwrite use PATCH method.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "utterances": {
                    "type": "array",
                    "description": "Shown only when `showUtterances` is set to true.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier of the utterance. No more than 100 characters."
                        },
                        "text": {
                          "type": "string",
                          "description": "No more than 500 characters."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Utterances added."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Vertical not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Verticals"
        ],
        "operationId": "patchVertical",
        "summary": "Updates a vertical.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "languageCode": {
                    "type": "string",
                    "description": "Two character language code compliant with ISO standard, e.g. \"en\" for English."
                  },
                  "description": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "alias": {
                    "type": "string"
                  },
                  "utterances": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier of the utterance. No more than 100 characters."
                        },
                        "text": {
                          "type": "string",
                          "description": "No more than 500 characters."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vertical properly updated."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Vertical not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Verticals"
        ],
        "operationId": "deleteVertical",
        "summary": "Deletes the vertical.",
        "responses": {
          "200": {
            "description": "Vertical properly deleted."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Vertical not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/verticals/{verticalId}/{utteranceId}": {
      "parameters": [
        {
          "in": "path",
          "name": "verticalId",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "utteranceId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Verticals"
        ],
        "operationId": "getVerticalUtterance",
        "summary": "Reads the utterance data.",
        "responses": {
          "200": {
            "description": "Utterance properly deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Utterance not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Verticals"
        ],
        "operationId": "updateVerticalUtterance",
        "summary": "Updates the utterance data.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier. No more than 100 characters."
                      },
                      "text": {
                        "type": "string",
                        "description": "No more than 500 characters."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Utterance properly updated."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Utterance not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Verticals"
        ],
        "operationId": "deleteVerticalUtterance",
        "summary": "Deletes the utterance data.",
        "responses": {
          "200": {
            "description": "Utterance properly deleted."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Utterance not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/models": {
      "description": "## CRUD models resource. List, retrieve and delete models. Models are linked to users.\n",
      "get": {
        "tags": [
          "Models"
        ],
        "operationId": "listModels",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "modelId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Lists all models belonging to the organisation.",
        "responses": {
          "200": {
            "description": "Models properly listed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The ID of the model. Use this ID to refere to the model in other parts of apiaudio."
                          },
                          "userId": {
                            "type": "string",
                            "description": "Owner of the audio files used for training."
                          },
                          "name": {
                            "type": "string",
                            "description": "Custom name during training initiation."
                          },
                          "gender": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Inherited from user of which data was used for training."
                          },
                          "languageCode": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "ISO compliant language code, e.g. `en-US`. Inherited from used verticals."
                          },
                          "verticalsUsed": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "IDs of verticals used for training data."
                          },
                          "numberOfUtterancesUsed": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "trainingDataDuration": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Amount of seconds of all the training data."
                          },
                          "createdAt": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unix time."
                          },
                          "trainingTime": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Amount of seconds spent training."
                          },
                          "status": {
                            "type": "string",
                            "description": "- \"starting\": Training initiated\n- \"training\": Training in progress\n- \"deploying\": Model is being deployed to apiaudio library\n- \"ready\": Model is ready to use in Speech module of apiaudio\n- \"failed\": Model training has failed. This normally shouldn't happen and indicates server-side error.\n"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/models/{userId}/{modelId}": {
      "delete": {
        "tags": [
          "Models"
        ],
        "operationId": "deleteModel",
        "summary": "Deletes Model.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "modelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model successfully removed."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          },
          "404": {
            "description": "Model not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/recording/{userId}": {
      "get": {
        "tags": [
          "Recording"
        ],
        "operationId": "guideUser",
        "summary": "Returns utterances to be recorded. Looks at `selectedVerticals` of the user and subtracts already recorded utterances.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "quantity",
            "required": false,
            "description": "The amount of utterances to return per vertical.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "verticalId",
            "required": false,
            "description": "Specific vertical to be returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "verticalId": {
                            "type": "string"
                          },
                          "summary": {
                            "type": "object",
                            "properties": {
                              "count": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "total": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "percentage": {
                                "type": "number"
                              }
                            }
                          },
                          "utterancesRecorded": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "text": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "utterancesToRecord": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "text": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/feedback/{userId}": {
      "get": {
        "tags": [
          "QA Feedback"
        ],
        "operationId": "getFeedback",
        "summary": "Get QA feedback for recorded files.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "verticalId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "utteranceId",
            "description": "Return specified utterance evaluation",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxNumItems",
            "description": "Return specified number of item evaluations if utteranceId not specified",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "deltaHours",
            "description": "Return item evaluations since given number of hours if verticalId and utteranceId not specified.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "extendedFeedback",
            "description": "Return expanded evaluations apart from summarised results.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "newAudioFeedback": {
                      "type": "object",
                      "properties": {
                        "assess_background_noise_passed": {
                          "type": "integer",
                          "description": "Number of items that passed the background noise evaluation. Lufs average of the background noise extracted after normalization needs to be under -57 dBs."
                        },
                        "assess_clipping_passed": {
                          "type": "integer",
                          "description": "Number of items that passed the clipping evaluation."
                        },
                        "assess_reverb_passed": {
                          "type": "integer",
                          "description": "Number of items that passed the reverberation evaluation."
                        },
                        "assess_text_coverage_passed": {
                          "type": "integer",
                          "description": "Number of items that passed the text coverage evaluation. Rating of the uttered words against the contents of the corresponding script."
                        },
                        "missed_words": {
                          "type": "array",
                          "description": "If text coverage failed, returns a list of missing words."
                        },
                        "missed_word_indices": {
                          "type": "array",
                          "description": "If text coverage failed, returns a list of indices of the missing words."
                        },
                        "assess_interrupted_passed": {
                          "type": "integer",
                          "description": "Number of items that passed the interruptions evaluation. Interrupted is linked to the text coverage assessment and specifically flags premature stopped recordings by focusing on trailing missing words."
                        },
                        "assess_too_loud_passed": {
                          "type": "integer",
                          "description": "Number of items that passed the maximum loudness limit evaluation. Lufs average loudness of the recording needs to be under -12 dBs."
                        },
                        "assess_too_quiet_passed": {
                          "type": "integer",
                          "description": "Number of items that passed the minimum loudness limit evaluation. Lufs average loudness of the recording needs to be above -29 dBs."
                        },
                        "audio_evaluation_passed": {
                          "type": "integer",
                          "description": "Number of items that passed all the audio evaluation checks."
                        },
                        "valid_audio": {
                          "type": "integer",
                          "description": "Number of items that conform to valid audio checks. Valid audio files need to be .wav recordings of a minimum sample rate of 16 kHz, no longer than 15 seconds and must contain at least one intelligible word."
                        },
                        "file_count": {
                          "type": "integer",
                          "description": "Total number of items."
                        }
                      }
                    },
                    "extendedFeedback": {
                      "type": "object",
                      "description": "Individual detailed evaluation for each returned item."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    },
    "/ulvc2/training/{userId}": {
      "post": {
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "training"
        ],
        "operationId": "postTraining",
        "summary": "Initiate training of a TTS model for given user. There must be a minimum of 100 files recorded that've passed the QA by the specified user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Custom name for the model. Purely descriptive."
                  },
                  "verticalsToUse": {
                    "type": "array",
                    "description": "IDs of verticals to use as training data. If not specified, all available files will be used.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Training triggered successfully."
          },
          "400": {
            "description": "Bad request. Error messages explain the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error or restricted access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadAuth"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "BadRequest": {
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Error message."
            }
          }
        }
      },
      "BadAuth": {
        "properties": {
          "message": {
            "type": "string",
            "example": "Access denied. No authentication method can be found."
          }
        }
      },
      "Options": {
        "properties": {
          "description": {
            "type": "string"
          },
          "paths": {
            "type": "object",
            "properties": {},
            "additionalProperties": true
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}